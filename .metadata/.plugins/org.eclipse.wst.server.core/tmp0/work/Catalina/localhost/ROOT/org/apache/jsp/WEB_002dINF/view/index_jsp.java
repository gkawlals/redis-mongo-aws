/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.58
 * Generated at: 2021-04-15 02:25:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import poly.util.CmmUtil;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("poly.util.CmmUtil");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	String room_name = CmmUtil.nvl((String) session.getAttribute("SS_ROOM_NAME"));

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<script src=\"/js/annyang.js\"></script>\r\n");
      out.write("<script src=\"/js/jquery-3.4.1.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t// annyang \r\n");
      out.write("\tannyang.start({\r\n");
      out.write("\t\tautoRestart: true,\r\n");
      out.write("\t\tcontinuous: true\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\t// 음성인식 값을 받아오기 위한 객체 생성 \r\n");
      out.write("\tvar recognition = annyang.getSpeechRecognizer();\r\n");
      out.write("\t\r\n");
      out.write("\t// 최종 음성인식 결과값 저장 변수 \r\n");
      out.write("\tvar final_transcript = \"\";\r\n");
      out.write("\t\r\n");
      out.write("\t// 말하는 동안에 인식되는 값 가져오기(허용) \r\n");
      out.write("\trecognition.interimResults = false;\r\n");
      out.write("\t\r\n");
      out.write("\t// 음성인식 결과 가져오기 \r\n");
      out.write("\trecognition.onresult = function(event) {\r\n");
      out.write("\t\tvar interim_transcript = \"\";\r\n");
      out.write("\t\tfinal_transcript = \"\";\r\n");
      out.write("\t\t\r\n");
      out.write("\t\tfor (var i = event.resultIndex; i < event.results.length; ++i) {\r\n");
      out.write("\t\t\tif (event.results[i].isFinal) {\r\n");
      out.write("\t\t\t\tfinal_transcript += event.results[i][0].transcript;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t$(\"#view_msg\").html(final_transcript);\r\n");
      out.write("\t\t$(\"#send_msg\").val(final_transcript);\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// AJAX 호출\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"/rank/movie.do\",\r\n");
      out.write("\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\tdataType: \"JSON\",\r\n");
      out.write("\t\t\tdata: $(\"form\").serialize(),\r\n");
      out.write("\t\t\tsuccess: function(json) {\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar msgResult = \"\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tfor (var i = 0; i < json.length; i++) {\r\n");
      out.write("\t\t\t\t\tmsgResult += (\"순위: \" + json[i].seq + \"<br/>\");\r\n");
      out.write("\t\t\t\t\tmsgResult += (\"영화제목: \" + json[i].movie_nm + \"<br/>\");\r\n");
      out.write("\t\t\t\t\tmsgResult += (\"영화평점: \" + json[i].score + \"<br />\");\r\n");
      out.write("\t\t\t\t\tmsgResult += (\"예매율: \" + json[i].movie_reserve + \"<br/>\");\r\n");
      out.write("\t\t\t\t\tmsgResult += (\"개봉일: \" + json[i].open_day + \"<br/>\");\r\n");
      out.write("\t\t\t\t\tmsgResult += (\"<hr/>\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#cgv_rank_list\").html(msgResult);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t};\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>내가 방금 말한 음성 명령</h1>\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<div id=\"view_msg\"></div>\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<h1>영화 순위 결과</h1>\r\n");
      out.write("\t<hr />\r\n");
      out.write("\t<div id=\"cgv_rank_list\"></div>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 음성 인식 데이터를 전송하기 위한 폼 -->\r\n");
      out.write("\t<form name=\"form\" method=\"post\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"send_msg\" id=\"send_msg\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
